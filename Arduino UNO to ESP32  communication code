//for actual code you may contact at Email ID : tusharpaul2001@gmail.com
//some part of the code is private, so you may contact through email 

We are sending the data from UNO to Esp32 because our load sensor does not support ESP32, 
and we also needed to transfer the data to the cloud (ThingSpeak), which we could not do with an Arduino because an Arduino UNO lacks a wifi module.

To execute the code, you will need to install Arduino IDE on your system and have load sensor, arduino UNO & ESP32.

Work Flow :
Load Sensor data -> Arduino UNO -> ESP32 -> ThingSpeak Cloud

////////////////////////////////////////////////////////////////////////

Code for Arduino UNO : 

int IRSensor = 9; // connect ir sensor module to Arduino pin 9
//int LED = 13; // conect LED to Arduino pin 13


#include "HX711.h"


// HX711 circuit wiring
const int LOADCELL_DOUT_PIN = 2;
const int LOADCELL_SCK_PIN = 3;


HX711 scale;


void setup() {
  Serial.begin(9600);
  //Serial.begin(115200); // Init Serila at 115200 Baud
  Serial.println("Serial Working"); // Test to check if serial is working or not
  pinMode(IRSensor, INPUT); // IR Sensor pin INPUT
  
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN); //load
}



void loop() {

   int sensorStatus = digitalRead(IRSensor); // Set the GPIO as Input

  if (sensorStatus == 1) // Check if the pin high or not
  {  
    Serial.println("Motion Ended!"); // print Motion Detected! on the serial monitor window
  }

  else

  {
    Serial.println("Motion Detected!"); // print Motion Ended! on the serial monitor window

    if (scale.is_ready()) {
    scale.set_scale();    
    Serial.println("Tare... remove any weights from the scale.");
    delay(500);
    scale.tare();
    Serial.println("Tare done...");
    Serial.print("Place a known weight on the scale...");
    delay(500);
    long reading = scale.get_units(10);
    Serial.print("Result: ");
    Serial.println(reading);
  } 

  else
 {
    Serial.println("HX711 not found.");
  }
  

  }

}


////////////////////////////////////////////////////////////////////////

This ESP32 code facilitates data transmission to the ThingSpeak cloud. It connects via a local wifi network, and Esp additionally communicates to an Arduino UNO. 

Code for ESP32 : 


#include <ThingSpeak.h>
#include <HTTPClient.h>

//#define AOUT_PIN 35

#include <WiFi.h>

const char* ssid = "Tushar";
const char* password = "tusharpaul";
unsigned long myChannelNumber =###### ;
const char * myWriteAPIKey = "APIkey";
String servername="write servername";
WiFiClient client;


void setup()
{
  Serial.begin(115200);

   WiFi.mode(WIFI_STA); 
    WiFi.begin(ssid, password);
    Serial.println("\nConnecting");

    while(WiFi.status() != WL_CONNECTED)
    {
        Serial.print(".");
        delay(100);
    }

    Serial.println("\nConnected to the WiFi network");
    Serial.print("Local ESP32 IP: ");
    Serial.println(WiFi.localIP());
}

void loop()
{
  String dat = Serial.readStringUntil('\n');
  int d = dat.toInt();
  Serial.println(d);

  delay(1000);

  if(WiFi.status()== WL_CONNECTED){ // Check to make sure wifi is still connected
      sendData(); // Call the sendData function defined below
    }
    else 
{
      Serial.println("WiFi Disconnected");
    }
}

void sendData()
{
  HTTPClient http; // Initialize our HTTP client


  String url  = servername + "&field2=" + d;
 
  http.begin(url.c_str()); // Initialize our HTTP request
 
  
  int httpResponseCode = http.GET(); // Send HTTP request
      
  if (httpResponseCode > 0)

  {                           
   // Check for good HTTP status code
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
  }

else

  {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }

  http.end();
}

////////////////////////////////////////////////////////////////////////

//you may face few problem with this code
//for actual code you may contact at Email ID : tusharpaul2001@gmail.com
//some part of the code is private, so you may contact through email 

////////////////////////////////////////////////////////////////////////
